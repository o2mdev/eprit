%% Help
%% 

scenario = 'Pulse image reconstruction';

groups{1} = get_group('Data load parameters', 'fbp');
groups{2} = get_group('Time domain', 'td');
groups{3} = get_group('FFT and projection correction', 'fft');
groups{4} = get_group('Reconstruction parameters', 'rec');
groups{5} = get_group('Image postprocessing', 'img');
groups{6} = get_group('Fitting parameters', 'fit');
groups{7} = get_group('Calibration parameters', 'clb');
groups{8} = get_group('Processing parameters', 'prc');

fields_FBP{1} = get_input_fields('Scheme', 'scheme', 'single_b', 'IDXS');
fields_FBP{end}.Show = {'SB', 'MB'};
fields_FBP{end}.Options = {'single_b', 'multi_b'};
fields_FBP{end+1} = get_input_fields('P-order','projection_order', 'default', 'IDXS');
fields_FBP{end}.Show = {'Default', 'MSPS'};
fields_FBP{end}.Options = {'default', 'msps'};
fields_FBP{end+1} = get_input_fields('Sequence', 'sequence', '2pECHO', 'IDXS');
fields_FBP{end}.Show = {'2pECHO','2pECHOSRT','3pT1','ESEInvRec', 'Rabi'};
fields_FBP{end}.Options = {'2pECHO','2pECHOSRT','3pT1','ESEInvRec', 'Rabi'};
fields_FBP{end+1} = get_input_fields('Polar angles', 'nPolar', 18, 'D');
fields_FBP{end+1} = get_input_fields('Azimuth. angles', 'nAz', 18, 'D');
fields_FBP{end+1} = get_input_fields('Image type','imtype', 14, 'IDX');
fields_FBP{end}.Show = {'4D XYZB', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '3D XYZ'};
fields_FBP{end}.Options = {'4D XYZB', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '3D XYZ'};
fields_FBP{end+1} = get_input_fields('Maximum gradient','MaxGradient', 1.5, 'D');
fields_FBP{end+1} = get_input_fields('Angular scheme','angle_sampling', 'uniform_angular_flip', 'IDXS');
fields_FBP{end}.Show = {'uniform_spatial_flip', 'uniform_angular_flip'};
fields_FBP{end}.Options = {'uniform_spatial_flip', 'uniform_angular_flip'};
fields_FBP{end+1} = get_input_fields('Coord. pole','CoordPole', 'Z', 'IDXS');
fields_FBP{end}.Show = {'X', 'Y', 'Z'};
fields_FBP{end}.Options = {'X', 'Y', 'Z'};
fields_FBP{end+1} = get_input_fields('Baseline type','baseline', 'every_n', 'IDXS');
fields_FBP{end}.Show = {'none', 'before', 'after', 'before_after', 'every_n', 'from_file'};
fields_FBP{end}.Options = {'none', 'before', 'after', 'before_after', 'every_n', 'from_file'};
fields_FBP{end+1} = get_input_fields('Baseline frequency','bl_n', 4, 'D');
fields_FBP{end+1} = get_input_fields('Resonator Q','Q', 13, 'D');
fields_FBP{end}.Flags = 1;

fields_TD{1} = get_input_fields('Baseline display', 'baseline_display', 'none', 'IDXS');
fields_TD{end}.Show = {'None', 'All', 'By slice'};
fields_TD{end}.Options = {'none', 'all', 'all_by_slice'};
fields_TD{end+1} = get_input_fields('Phase display', 'phase_display', 'none', 'IDXS');
fields_TD{end}.Show = {'None', 'All', 'By slice'};
fields_TD{end}.Options = {'none', 'all', 'all_by_slice'};
fields_TD{end+1} = get_input_fields('BL Algorithm', 'baseline_algorithm', '', 'IDXS');
fields_TD{end}.Show = {'None', 'Zero order, trace-by-trace', 'Zero order, global', 'First order, trace-by-trace'};
fields_TD{end}.Options = {'none', 'zero_single', 'zero_all', 'first_single'};
fields_TD{end+1} = get_input_fields('Off resonance BL', 'off_res_baseline', '', 'IDXS');
fields_TD{end}.Show = {'No', 'Yes'};
fields_TD{end}.Options = {'no', 'yes'};
fields_TD{end+1} = get_input_fields('BL Area [pts]', 'baseline_area', '200:1200', 'D');
fields_TD{end+1} = get_input_fields('Clip data [ns]', 'data_clip_ns', '10000', 'D');
fields_TD{end+1} = get_input_fields('Dead time [ns]', 'dead_time', '580', 'D');
fields_TD{end+1} = get_input_fields('Acquisition trigger [ns]', 'acq_window_start', '-2200', 'D');
%fields_TD{end+1} = get_input_fields('PRE filter', 'filt_before', 'none', 'S');
%fields_TD{end+1} = get_input_fields('PRE filter', 'tc_before', 18, 'D');
fields_TD{end+1} = get_input_fields('ZERO sample echo(s)', 'use_echos', '[]', 'D');
fields_TD{end+1} = get_input_fields('ZERO time algorithm', 'echo_select_algorithm', 'statistics', 'IDXS');
fields_TD{end}.Show = {'Manual', 'Statistics based', 'Trace-by-trace'};
fields_TD{end}.Options = {'manual', 'statistics', 'single'};
fields_TD{end+1} = get_input_fields('ZERO manual index [pts]', 'echo_idx', 18, 'D');
fields_TD{end+1} = get_input_fields('PHASE algorithm', 'phase_algorithm', 'phase_zero_order', 'IDXS');
fields_TD{end}.Show = {'None', 'Manual (0-order)', 'Maximum real part (0-order)', 'Maximum real part w smooth (0-order)', 'max_real_all', 'max_real_poly3','max_real_manual','min_imag_manual'};
fields_TD{end}.Options = {'None', 'manual_zero_order', 'max_real_single', 'max_real_single_smooth', 'max_real_all', 'max_real_poly3','max_real_manual','min_imag_manual'};
fields_TD{end+1} = get_input_fields('PHASE zero order [deg]', 'phase_zero_order', 0, 'D');
%fields_TD{end+1} = get_input_fields('DECAY correction', 'echo_decay_correction', 'none', 'S');
%fields_TD{end+1} = get_input_fields('DECAY T2', 'echo_decay_T2', 4, 'D');
fields_TD{end+1} = get_input_fields('[I,Q]->[I,-Q]', 'prj_transpose', 'no', 'IDXS');
fields_TD{end}.Show = {'Yes', 'No'};
fields_TD{end}.Options = {'yes', 'no'};


fields_FFT{1} = get_input_fields('Display', 'fft_display', 'all', 'IDXS');
fields_FFT{end}.Show = {'None', 'All', 'By slice'};
fields_FFT{end}.Options = {'none', 'all', 'all_by_slice'};
fields_FFT{end+1} = get_input_fields('Display imaginary', 'fft_display_imag', 'all', 'IDXS');
fields_FFT{end}.Show = {'None', 'All', 'By slice'};
fields_FFT{end}.Options = {'none', 'all', 'all_by_slice'};
%fields_FFT{end+1} = get_input_fields('awin', 'awin', 'none', 'S');
%fields_FFT{end+1} = get_input_fields('awidth', 'awidth', 1, 'D');
%fields_FFT{end+1} = get_input_fields('aalpha', 'aalpha', 1, 'D');
%fields_FFT{end+1} = get_input_fields('ashift', 'ashift', 0, 'D');
%fields_FFT{end+1} = get_input_fields('awings', 'awings', 'off', 'S');
%fields_FFT{end+1} = get_input_fields('opt', 'opt', 'imag', 'S');
%fields_FFT{end+1} = get_input_fields('fft', 'fft', 1, 'D');
%fields_FFT{end+1} = get_input_fields('zerofill', 'zerofill', 1, 'D');
%fields_FFT{end+1} = get_input_fields('phase0', 'phase0', 0, 'D');
fields_FFT{end+1} = get_input_fields('Zero offset', 'xshift_mode', 'manual', 'IDXS');
fields_FFT{end}.Show = {'None', 'Manual', 'Automatic'};
fields_FFT{end}.Options = {'none', 'manual', 'fit_gzero_trace'};
fields_FFT{end+1} = get_input_fields('Projection zero offset [MHz]', 'xshift', 0, 'D');
%fields_FFT{end+1} = get_input_fields('filt', 'filt', 'none', 'S');
%fields_FFT{end+1} = get_input_fields('tc', 'tc', 33, 'D');
fields_FFT{end+1} = get_input_fields('FT zero time position', 'data', '0_', 'IDXS');
fields_FFT{end}.Show = {'Echo decay', 'Echo decay with conjugated', 'Full echo (reconstructed)', 'Available echo'};
fields_FFT{end}.Options = {'0_', '0__0', '_0_', '_0__'};
fields_FFT{end+1} = get_input_fields('Offset of profile [MHz]', 'profile_center_offset', 0, 'D');
fields_FFT{end+1} = get_input_fields('Profile correction', 'profile_correction', 'imager_profile', 'IDXS');
fields_FFT{end}.Show = {'Imager profile(file)', 'Lorentzian', 'Library', 'cos3 - fitted profile', 'sinc - fitted profile', 'gauss - fitted profile'};
fields_FFT{end}.Options = {'imager_profile', 'lorentz', 'library', 'cos3fitted', 'sincfitted', 'gaussfitted'};
fields_FFT{end+1} = get_input_fields('Profile correction file', 'profile_file', 'ffff', 'F');
fields_FFT{end}.Flags = 1;
fields_FFT{end+1} = get_input_fields('Profile threshold (0-1)', 'profile_threshold', 0.25, 'D');
fields_FFT{end+1} = get_input_fields('Profile FWHH [MHz]', 'profile_fwhh', 10, 'D');
fields_FFT{end+1} = get_input_fields('Smooth threshold', 'profile_threshold_smooth', 0, 'D');
fields_FFT{end+1} = get_input_fields('Clearence correction', 'clearence_correction', 'none', 'S');
fields_FFT{end+1} = get_input_fields('Export clearence', 'fft_export_clearence', 'no', 'IDXS');
fields_FFT{end}.Show = {'Yes', 'No'};
fields_FFT{end}.Options = {'yes', 'no'};

fields_REC{1} = get_input_fields('Reconstruct echos', 'recon_echos', [], 'D');
fields_REC{end+1} = get_input_fields('P-index','projection_index', '[]', 'D');
fields_REC{end+1} = get_input_fields('Matrix size', 'Sub_points', 64, 'D');
fields_REC{end+1} = get_input_fields('FOV/sqrt(2) [cm]', 'Size', 3.0, 'D');
fields_REC{end+1} = get_input_fields('Gradient scale [=1]', 'gradient_scale_factor', 1.0, 'D');
fields_REC{end+1} = get_input_fields('DoublePoints', 'DoublePoints', 3.0, 'D');
fields_REC{end+1} = get_input_fields('InterpFactor', 'InterpFactor', 4, 'D');
fields_REC{end+1} = get_input_fields('Filter', 'Filter', 'ram-lak', 'IDXS');
fields_REC{end}.Show = {'ram-lak', 'shepp-logan','butterworth'};
fields_REC{end}.Options = {'ram-lak', 'shepp-logan','butterworth'};
fields_REC{end+1} = get_input_fields('Interpolation', 'Interpolation', 'spline', 'S');
fields_REC{end+1} = get_input_fields('FilterCutOff', 'FilterCutOff', 0.5, 'D');
fields_REC{end+1} = get_input_fields('Code', 'CodeFlag', 'MATLAB', 'IDXS');
fields_REC{end}.Show = {'FORTRAN', 'MATLAB', 'C', 'Single stage v1 (CPU)', 'Single stage v1 (GPU)', 'Single stage v2 (CPU)', 'Single stage v2 (GPU)'};
fields_REC{end}.Options = {'FORTRAN', 'MATLAB', 'C', 'SINGLEv1', 'SINGLEv1 GPU', 'SINGLEv2', 'SINGLEv2 GPU'};

fields_IMG{1} = get_input_fields('Mirror image [x,y,z]', 'mirror_image', '[0,0,0]', 'D');
fields_IMG{end+1} = get_input_fields('Regularization', 'reg_method', 'none', 'IDXS');
fields_IMG{end}.Show = {'None', 'TV-L2 denoising'};
fields_IMG{end}.Options = {'none', 'TV-L2'};
fields_IMG{end+1} = get_input_fields('Sigma', 'sigma', 0.002, 'D');
fields_IMG{end+1} = get_input_fields('Tau', 'tau', 0.125, 'D');
fields_IMG{end+1} = get_input_fields('Lambda', 'lambda0', 1, 'D');

fields_FIT{1} = get_input_fields('Use data for T2 fit', 'use_echosT2', [], 'D');
fields_FIT{end+1} = get_input_fields('Use data for T1 fit', 'use_echosT1', [], 'D');
fields_FIT{end+1} = get_input_fields('Fitting function', 'fit_function', 'fit_exp_no_offset', 'IDXS');
fields_FIT{end}.Show = {'T2 decay', 'Inv. Rec. T1', 'Inv. Rec. T1+T2', 'Inv. Rec. T1 sat', 'Rabi nutation (sin)'};
fields_FIT{end}.Options = {'fit_exp_no_offset', 'fit_recovery_3par', 'fit_recovery_simultaneous', 'fit_recovery_saturated', 'fit_rabi'};
fields_FIT{end+1} = get_input_fields('Mask', 'fit_mask', 'threshold_mask', 'IDXS');
fields_FIT{end}.Show = {'Threshold', 'External file'};
fields_FIT{end}.Options = {'threshold_mask', 'external_file'};
fields_FIT{end+1} = get_input_fields('Mask threshold (0-1)', 'fit_mask_threshold', 0.1, 'D');
fields_FIT{end+1} = get_input_fields('External mask file', 'fit_mask_file', 'ffff', 'F');
fields_FIT{end}.Flags = hex2dec('0');

stage_show = {'None', 'Fill holes in the mask', 'Leave only objects larger than N', 'Raise threshold', 'Leave the largest Object', 'Geometric expansion'};
stage_opt  = {'proc_none', 'proc_fill', 'proc_leave_large', 'proc_adaptive_threshold', 'proc_leave_the_largest', 'geometric_expansion'};
fields_FIT{end+1} = get_input_fields('Mask processing stage 1', 'mask_proc_stage1', 'proc_none', 'IDXS');
fields_FIT{end}.Show = stage_show;
fields_FIT{end}.Options = stage_opt;
fields_FIT{end+1} = get_input_fields('Mask processing stage 2', 'mask_proc_stage2', 'proc_none', 'IDXS');
fields_FIT{end}.Show = stage_show;
fields_FIT{end}.Options = stage_opt;
fields_FIT{end+1} = get_input_fields('Mask processing stage 3', 'mask_proc_stage3', 'proc_none', 'IDXS');
fields_FIT{end}.Show = stage_show;
fields_FIT{end}.Options = stage_opt;
fields_FIT{end+1} = get_input_fields('Mask processing stage 4', 'mask_proc_stage4', 'proc_none', 'IDXS');
fields_FIT{end}.Show = stage_show;
fields_FIT{end}.Options = stage_opt;
fields_FIT{end+1} = get_input_fields('Fill holes in the mask', 'fit_mask_fill', '0', 'D');
fields_FIT{end+1} = get_input_fields('Leave only objects larger than N', 'fit_mask_object_size', '0', 'D');
fields_FIT{end+1} = get_input_fields('Maximum voxels in the mask', 'fit_mask_max_voxels', '6000', 'D');

fields_FIT{end+1} = get_input_fields('Saturation correction', 'sat_correction', 'none', 'IDXS');
fields_FIT{end}.Show = {'No Correction', 'Fixed T1', 'T1=1.2*T2' };
fields_FIT{end}.Options = {'none', 'Fixed_T1', 'T2_based'};
fields_FIT{end+1} = get_input_fields('T1 [us]', 'T1', 6, 'D');

fields_FIT{end+1} = get_input_fields('Consider fit errors as bad voxels', 'fit_errors_kill', 'yes', 'IDXS');
fields_FIT{end}.Show = {'Yes', 'No'};
fields_FIT{end}.Options = {'yes', 'no'};
fields_FIT{end+1} = get_input_fields('Fitting method', 'fit_method', 'Method1', 'IDXS');
fields_FIT{end}.Show = {'Default', 'Lookup general', 'Lookup adapted'};
fields_FIT{end}.Options = {'default', 'lookup_general', 'lookup_adapted'};
fields_FIT{end+1} = get_input_fields('Lookup Inv', 'fit_par_inv', 'linspace(0.85, 1.35, 25)', 'S');
fields_FIT{end+1} = get_input_fields('Lookup R2', 'fit_par_R2', 'linspace(1/0.55, 1/9.0, 1200)', 'S');
fields_FIT{end+1} = get_input_fields('Lookup R1', 'fit_par_R1', 'linspace(1/0.55, 1/9.0, 1200)', 'S');
fields_FIT{end+1} = get_input_fields('Minimum amplitude (0-1)*mean', 'fit_min_amp', 0, 'D');
fields_FIT{end+1} = get_input_fields('Maximum amplitude (0-1)*mean', 'fit_max_amp', 5, 'D');
fields_FIT{end+1} = get_input_fields('Minimum T2 [us]', 'fit_min_T2', 0, 'D');
fields_FIT{end+1} = get_input_fields('Maximum T2 [us]', 'fit_max_T2', 20, 'D');
fields_FIT{end+1} = get_input_fields('Minimum T1 [us]', 'fit_min_T1', 0, 'D');
fields_FIT{end+1} = get_input_fields('Maximum T1 [us]', 'fit_max_T1', 20, 'D');

fields_PRC{1} = get_input_fields('Processing type', 'process_method', 'ese_fbp', 'IDXS');
fields_PRC{end}.Show = {'Pulse ESE', '3p ESE T1', 'ESE Inv Rec', 'RT Saturation', 'CW 4D', 'Pulse MB ESE', 'T1 T2 combined', 'B1', 'Special: residual gradient'};
fields_PRC{end}.Options = {'ese_fbp', 'ese_fbp_3pT1', 'ese_fbp_InvRec', 'ese_fbp_SRT', 'cw_fbp', 'ese_mb_fbp', 'ese_fbp_T1T2InvRec', 'ese_fbp_Rabi', 'spec_grad_min'};
fields_PRC{end+1} = get_input_fields('Reconstruct data', 'recon_data', 'yes', 'IDXS');
fields_PRC{end}.Show = {'Yes', 'No'};
fields_PRC{end}.Options = {'yes', 'no'};
fields_PRC{end+1} = get_input_fields('Export projections', 'export_prj', 'no', 'IDXS');
fields_PRC{end}.Show = {'Yes', 'No'};
fields_PRC{end}.Options = {'yes', 'no'};
fields_PRC{end+1} = get_input_fields('Export raw', 'export_raw', 'no', 'IDXS');
fields_PRC{end}.Show = {'Yes', 'No'};
fields_PRC{end}.Options = {'yes', 'no'};
fields_PRC{end+1} = get_input_fields('Save data', 'save_data', 'yes', 'IDXS');
fields_PRC{end}.Show = {'Yes', 'No'};
fields_PRC{end}.Options = {'yes', 'no'};
fields_PRC{end+1} = get_input_fields('Fit data', 'fit_data', 'no', 'IDXS');
fields_PRC{end}.Show = {'Yes', 'No'};
fields_PRC{end}.Options = {'yes', 'no'};
fields_PRC{end+1} = get_input_fields('Show viewer', 'launch_viewer', 'no', 'IDXS');
fields_PRC{end}.Show = {'Yes', 'No'};
fields_PRC{end}.Options = {'yes', 'no'};

fields_CLB{1} = get_input_fields('LLW_zero_po2 [mG]', 'LLW_zero_po2', 12.4, 'D');
fields_CLB{2} = get_input_fields('mG_per_mM [mG/mM]', 'mG_per_mM', 2.32, 'D');
fields_CLB{3} = get_input_fields('Torr_per_mGauss [torr/mG]', 'Torr_per_mGauss', 1.84, 'D');
fields_CLB{4} = get_input_fields('amp1mM', 'amp1mM', 0.065, 'D');
fields_CLB{5} = get_input_fields('Q during calibration', 'Qcb', 14, 'D');
